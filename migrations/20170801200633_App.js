
exports.up = function(knex, Promise) {
  return knex
    .schema
    .createTableIfNotExists('users', usersTable => {
      // Setting the primary key. Note that it increments.
      usersTable.increments();

      usersTable.string('name', 50).notNullable();
      usersTable.string('username', 50).notNullable().unique();
      usersTable.string('email', 250).notNullable().unique();
      usersTable.string('password', 128).notNullable();
      
      // 36 is the length of strings generated by node-uuid. I'll let it be up to 40 just to be safe.
      usersTable.string('identity_key', 40).notNullable().unique();

      usersTable.timestamp('created_at').notNullable();
    })

    .createTableIfNotExists('todos', todosTable => {
      // Primary key - Again auto-increments.
      todosTable.increments();
      todosTable.string('by').references('identity_key').inTable('users');

      // I'm setting 30 as the maximum title size.
      todosTable.string('title', 30).notNullable();
      
      // Details of the todo. This is one field that may be null.
      todosTable.text('details');

      // We're going to have a similar identity key for the todos table.
      todosTable.string('identity_key', 40).notNullable().unique();

      // I'm making todos private by default.
      todosTable.boolean('isPublic').notNullable().defaultTo(false);


      // A timestamp. This is necessary for book-keeping purposes and to make sure
      // that todos are editable for upto 24 hours.
      todosTable.timestamp('created_at').notNullable();

    })
};

exports.down = function(knex, Promise) {
  // Note the 'if exists' clause. Safety first.
  return knex
    .schema
      // Note that we're dropping todos first because each row in it references
      // a row in the users table.
      .dropTableIfExists('todos')
      .dropTableIfExists('users');
};
